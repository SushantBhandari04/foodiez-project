// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id       String  @id @default(uuid())
//   username String  @unique
//   password String
//   orders   Order[]
// }

model MenuItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  typeName    String
  type        Type        @relation(fields: [typeName], references: [name])
  orders      OrderItem[] @relation("MenuItemToOrderItem") // Add relation name
}

model OrderItem {
  id         String   @id @default(uuid())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], name: "MenuItemToOrderItem") // Match relation name
  menuItemId String
  quantity   Int
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  status      String      @default("pending") // pending, completed
  createdAt   DateTime    @default(now())
  orderId     String?     @unique // Add this field to store the Razorpay order ID
  totalAmount Float? // Add this field to store the total amount of the order
}

model Type {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  items       MenuItem[]
  image       String
}

model Table {
  id        String   @id @default(uuid())
  userId    String  
  user      User     @relation(fields: [userId], references: [id])
  guests    Int
  name      String
  phone     Float
  date      String
  time      String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  username      String?
  name          String?
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  table         Table[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
